# TODO check if it wouldn't be a good idea to unalias/unset everything beforehand to be able to overwrite possibly existing aliases or functions, e.g. it has been observed that trying to define a function fails if an alias with the same name is already defined.

###########################
# General
###########################
# TODO provide a 'reset_bash_initialization_files' function that leaves ~/.bash* only with the configuration managed by this project (do not forget anyway that some systems might have profile defaults in /etc/profile*, which means that this won't guarantee a completely uniform Bash experience across different types of systems). This reset could possibly be performed by simply deleting several of these files and then recreating them. Just let .old backups for the originals. Considering that there might already be customizations in these files required for specific systems, the safest bet is to not perform this reset automatically.

urlencode() { python -c "import urllib; print urllib.quote('''$1''', '')"; }

# To allow to visually differentiate STDOUT from STDERR
color() { "$@" 2>&1>&3|sed 's,.*,\x1B[31m&\x1B[0m,'>&2; } 3>&1
# To become root preserving the environment. Note that the HOME env variable is being set to workaround a possible 'Defaults always_set_home' in /etc/sudoers, but it might have security implications (for example, in openSUSE Leap v15.1 the /etc/sudoers says the following: "Prevent environment variables from influencing programs in an unexpected or harmful way (CVE-2005-2959, CVE-2005-4158, CVE-2006-0151)" on top of that line).
super() { history -a; sudo -Es HOME=$HOME; }

# TODO look if sudo by itself could provide for the following functionality (see https://confluence.blobfish.pe/x/kIdMAw).
# FIXME something like "sudo cat < file.txt" is having problems, maybe because the piped in content isn't an exact "y"?. 
# FIXME it has been observed that pressing CTRL + C after "sudo cat file.txt | more" leaves the terminal in an unusable state.
mysudo () {
local sudoargs=$@
read -erp "Shall \"$sudoargs\" be executed with sudo? (y/N): " -i "y"
if [[ "$REPLY" == [Yy] ]]; then
command sudo "$@"
else
return 1
fi
}

mine () {
# TODO check if it works if we are the "root" user itself.
if [ -z "$SUDO_USER" ]; then
  # TODO check if sudo is always required here, e.g. could it be avoided if the current user owns the current directory?.
  sudo chown -R $USER .
else
  chown -R $SUDO_USER .
fi
}
alias la="ls -la"

###########################
# iptables/firewall related
###########################
# TODO check is it really good practice to put 'sudo' in aliases definitions?.
function il {
# TODO if we are already USER=root, do not execute with "sudo" as it is not required. Maybe extract a function like: "sudo_if_not_root" and use it in this entire file.
sudo iptables -n -v --line-numbers -L $@
}
alias iln='sudo iptables -L -t nat -n -v --line-numbers '
alias il6='sudo ip6tables -L -n -v --line-numbers'

###########################
# PVE hosts related
###########################
# TODO try to provide the default password too, i.e. 'secret'.
# TODO check if the following $1 is really working as this technique didn't work for pem_certs being an alias.
alias console="sudo pct console $1 -escape '^l'"

###########################
# Git repositories related, e.g. etckeeper
###########################
alias gs="git status -u"
alias gh="git show "
alias gd="git diff"
alias gds="git diff --staged"
alias gl="git log"
alias gls="git log --name-status"
alias gaa="git add -A"
alias gc="git commit -m "
alias ec="etckeeper commit "
alias ect="etckeeper commit \"Quick commit.\""
alias etckeeper-pre-commit-disable="sudo mv /etc/.git/hooks/pre-commit /etc/.git/hooks/pre-commit.disabled"
alias etckeeper-pre-commit-enable="sudo mv /etc/.git/hooks/pre-commit.disabled /etc/.git/hooks/pre-commit"

###########################
# screen related
##########################
alias sls="screen -ls"
alias srd="screen -rd"

###########################
# Crypto related
###########################
pem_certs() { openssl crl2pkcs7 -nocrl -certfile $1 | openssl pkcs7 -print_certs -text; }
