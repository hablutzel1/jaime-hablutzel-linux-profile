# TODO check if it wouldn't be a good idea to unalias/unset everything beforehand to be able to overwrite possibly existing aliases or functions, e.g. it has been observed that trying to define a function fails if an alias with the same name is already defined.

###########################
# General
###########################
# TODO provide a 'reset_bash_initialization_files' function that leaves ~/.bash* only with the configuration managed by this project (do not forget anyway that some systems might have profile defaults in /etc/profile*, which means that this won't guarantee a completely uniform Bash experience across different types of systems). This reset could possibly be performed by simply deleting several of these files and then recreating them. Just let .old backups for the originals. Considering that there might already be customizations in these files required for specific systems, the safest bet is to not perform this reset automatically.

urlencode() { python -c "import urllib; print urllib.quote('''$1''', '')"; }

# To allow to visually differentiate STDOUT from STDERR
color() { "$@" 2>&1>&3|sed 's,.*,\x1B[31m&\x1B[0m,'>&2; } 3>&1

# To become root preserving the environment. Note that the HOME env variable is being set to workaround a possible 'Defaults always_set_home' in /etc/sudoers, but it might have security implications (for example, in openSUSE Leap v15.1 the /etc/sudoers says the following: "Prevent environment variables from influencing programs in an unexpected or harmful way (CVE-2005-2959, CVE-2005-4158, CVE-2006-0151)" on top of that line).
# TODO auto log out from root sessions.
super() {
history -a;
/usr/bin/sudo -Es HOME=$HOME HISTCONTROL=$HISTCONTROL HISTSIZE=$HISTSIZE HISTFILESIZE=$HISTFILESIZE;
history -r;
}

# This seems to be the default behavior that I want for sudo. For example, it allows to use my own Emacs settings when doing something like 'sudo emacs file'.
sudo() {
# Wrapping `/usr/bin/sudo` with history refreshes only for scenarios where something like `sudo bash` is to be executed.
history -a;
/usr/bin/sudo -E HOME=$HOME HISTCONTROL=$HISTCONTROL HISTSIZE=$HISTSIZE HISTFILESIZE=$HISTFILESIZE "$@";
history -r;
}

mine () {
# TODO prompt for confirmation if I'm outside my home folder.
# TODO check if it works if we are the "root" user itself.
if [ -z "$SUDO_USER" ]; then
  # TODO check if sudo is always required here, e.g. could it be avoided if the current user owns the current directory?.
  sudo chown -R $USER .
else
  chown -R $SUDO_USER .
fi
}
alias la="ls -la"
alias lat="ls -lat"

# Using autossh by default for automatic reconnections.
if [ -x "$(command -v autossh)" ]; then
  alias ssh="$(which autossh) -M 0"
fi

#########################
# Clipboard management
#########################

c() {    
    if [[ $(uname) == "Darwin" ]]; then
        pbcopy
    else
        xsel -b
    fi
}

p() {
    if [[ $(uname) == "Darwin" ]]; then
        pbpaste
    else
        xsel -b
    fi
}

copyfullpath() {
    readlink -n -f "$1" | c
    echo "Full path copied to clipboard."
}

# An iTerm2 Trigger is expected to be set up for the output of this alias.
alias n='echo processCompletedNotificationForITerm2!'

############################
# chatGPT-shell-cli
############################
alias 'chatgpt'='~/.chatgpt-shell-cli/chatgpt.sh -m gpt-4'
# TODO study GitHub Copilot CLI that apparently allows to store executed commands in the shell history. From `echo $(github-copilot-cli alias -- "$0")`: copilot_gh-assist () { TMPFILE=$(mktemp); trap 'rm -f $TMPFILE' EXIT; if /opt/homebrew/bin/github-copilot-cli gh-assist "$@" --shellout $TMPFILE; then if [ -e "$TMPFILE" ]; then FIXED_CMD=$(cat $TMPFILE); history -s $(history 1 | cut -d' ' -f4-); history -s "$FIXED_CMD"; eval "$FIXED_CMD" else echo "Apologies! Extracting command failed" fi else return 1 fi }; alias 'gh?'='copilot_gh-assist';
chatgpt-shell-cli_command() {
~/.chatgpt-shell-cli/chatgpt.sh -m gpt-4 -p "command:$*"
}
alias 'c?'='chatgpt-shell-cli_command'

############################
# GitHub Copilot in the CLI
# IMPORTANT: It looks unsafe to use this in a shared host, as it seems to store the API token directly in ~/.config/gh/hosts.yml. In the meantime it can only be used in personal-only workstations. TODO try to restrict the credential to only GitHub Copilot. Maybe it could be done with a token or a custom OAuth App.  
############################
gh-copilot_suggest_shell() { gh copilot suggest -t shell "$*"; }
alias '??'='gh-copilot_suggest_shell'

###########################
# iptables/firewall related
###########################
# TODO check is it really good practice to put 'sudo' in aliases definitions?.
function il {
# TODO if we are already USER=root, do not execute with "sudo" as it is not required. Maybe extract a function like: "sudo_if_not_root" and use it in this entire file.
sudo iptables -n -v --line-numbers -L $@
}
alias iln='sudo iptables -L -t nat -n -v --line-numbers '
alias il6='sudo ip6tables -L -n -v --line-numbers'

###########################
# PVE hosts related
###########################
# TODO try to provide the default password too, i.e. 'secret'.
# TODO check if the following $1 is really working as this technique didn't work for pem_certs being an alias.
alias console="sudo pct console $1 -escape '^l'"

###########################
# Git repositories related, e.g. etckeeper
###########################
alias gs="git status -u"
alias gsh="git show "
alias gd="git diff"
alias gds="git diff --staged"
alias gl="git log --graph --all --decorate"
alias gls="git log --graph --all --decorate --name-status"
alias gaa="git add -A"
alias gc="git commit -m "
# TODO check: maybe the following could be replaced by a proper Git alias. See https://stackoverflow.com/a/2419270/320594.
alias gct="git add -A && git commit -m \"UNREVIEWED: Quick commit.\""
alias ec="etckeeper commit "
alias ect="etckeeper commit \"UNREVIEWED: Quick commit.\""
alias etckeeper-pre-commit-disable="sudo mv /etc/.git/hooks/pre-commit /etc/.git/hooks/pre-commit.disabled"
alias etckeeper-pre-commit-enable="sudo mv /etc/.git/hooks/pre-commit.disabled /etc/.git/hooks/pre-commit"

###########################
# screen related
##########################
alias sls="screen -ls"
alias srd="screen -rd"

###########################
# Crypto related
###########################
osslpemcerts() {
    if [ "$#" -eq 0 ]; then
        openssl crl2pkcs7 -nocrl -certfile /dev/stdin | openssl pkcs7 -print_certs -text;
    else
        openssl crl2pkcs7 -nocrl -certfile "$1" | openssl pkcs7 -print_certs -text;
    fi
}

# Since OpenSSL 3.0, the input encoding is detected automatically, so the -inform flag is not required anymore. See https://www.openssl.org/docs/man3.0/man1/openssl-format-options.html.
osslcert() {
  local filenames=()
  local default_options=(-noout -text)
  local extra_options=()
  local match_found=false
  
  # TODO ensure it plays nice with filenames that contain spaces or the '-' character, so the match for '-' below should always search for a preceding space. Should it look for the start of a word as well?
  for arg in "$@"; do
    if [[ "$arg" == -* ]]; then
      match_found=true
    fi
    if ! $match_found; then
      filenames+=("$arg")
    else
      extra_options+=("$arg")
    fi
  done

  if [ ${#filenames[@]} -eq 0 ]; then
    openssl x509 "${default_options[@]}" "${extra_options[@]}"
  elif [ ${#filenames[@]} -eq 1 ]; then
    openssl x509 -in "${filenames[0]}" "${default_options[@]}" "${extra_options[@]}"
  else
    for cert in "${filenames[@]}"; do
      echo "> $cert:"
      openssl x509 -in "$cert" "${default_options[@]}" "${extra_options[@]}"
      echo
    done
  fi
}

# Encoding enforcing versions.
osslpemcert() {
    osslcert "$@" -inform PEM    
}
ossldercert() {
  osslcert "$@" -inform DER
}

# TODO check if the variables inside, e.g. `cert` or `IFS` affect the outer scope.
# TODO check if I have written something similar in the past. Try to locate the script or program I made for ordering certificates and comparing them.
# TODO write some automated tests for this method because there is compliance risk involved if it malfuctions.
# TODO ensure it works with certificates without extensions at all (test OpenSSL 1.x and 3.x).
osslcertordered() {
  local filenames=()
  local default_options=(-noout -text)
  local extra_options=()
  local match_found=false

  # TODO ensure it plays nice with filenames that contain spaces or the '-' character, so the match for '-' below should always search for a preceding space. Should it look for the start of a word as well?
  for arg in "$@"; do
    if [[ "$arg" == -* ]]; then
      match_found=true
    fi
    if ! $match_found; then
      filenames+=("$arg")
    else
      extra_options+=("$arg")
    fi
  done

  if [ ${#filenames[@]} -eq 0 ]; then
    cert=$(openssl x509 "${default_options[@]}" "${extra_options[@]}")
  else
    cert=$(openssl x509 -in "${filenames[0]}" "${default_options[@]}" "${extra_options[@]}")
  fi
  before_extensions=$(echo "$cert" | sed -n '/X509v3 extensions:/q;p')
  original_extensions=$(echo "$cert" | sed -n -e '/X509v3 extensions:/,/Signature Algorithm:/p')
  after_extensions=$(echo "$cert" | awk '/Signature Algorithm/{a=""} {a=a$0"\n"} END{print a}')

  IFS=$'\n'
  ext_name_start_chars='[a-zA-Z0-9]'
  declare -A ext_contents_map
  for ext in $(echo "$original_extensions" | grep -E "^ {12}$ext_name_start_chars"); do
    ext_content=$(echo "$original_extensions" | sed -n "/$ext/,/^            $ext_name_start_chars/p")
    IFS= read -rd '' ext_content < <(echo "$ext_content" | sed '$d')
    ext_contents_map["$(echo "$ext" | sed -e 's/[[:space:]]//g')"]="$ext_content"
  done
  sorted_extensions=""
  for ext in $(echo "${!ext_contents_map[@]}" | tr ' ' '\n' | sort -V); do
    sorted_extensions="$sorted_extensions${ext_contents_map[$ext]}"
  done

  echo "$before_extensions"
  echo "        X509v3 extensions:"
  echo -n "$sorted_extensions"
  echo "$after_extensions"
}

function osslcheckocsp() {
  local domain="$1"
  local port="${2:-443}"
  local cert_file=$(mktemp)
  local issuer_file=$(mktemp)
  openssl s_client -showcerts -connect "${domain}:${port}" 2>/dev/null </dev/null | openssl x509 -outform PEM > "$cert_file"
  # TODO manage the case where the AIA CA Issuers is not present.
  local issuer_url=$(openssl x509 -in "$cert_file" -noout -text | grep -A 1 "Authority Information Access" | tail -n 1 | awk -F 'URI:' '{print $2}')
  curl -s -o - "$issuer_url" | openssl x509 -inform DER > "$issuer_file"
  # TODO manage the case where the OCSP URl is not present. Ensure to display a clear error.
  local ocsp_url=$(openssl x509 -in "$cert_file" -noout -ocsp_uri)
  openssl ocsp -issuer "$issuer_file" -cert "$cert_file" -no_nonce -url "$ocsp_url" -resp_text
  rm "$cert_file" "$issuer_file"
}

# TODO support input from STDIN.
function osslreq(){
  if [ "$#" -eq 0 ]; then
    openssl req -noout -text
  else
    openssl req -in "$1" -noout -text
  fi
}

osslretrievesslchain() {
  local url="$1"
  local domain port
  url="${url#*://}"
  if [[ $url =~ : ]]; then
    domain="${url%:*}"
    port="${url##*:}"
  else
    domain="$url"
    port=443
  fi
  domain="${domain%%/*}"
  openssl s_client -showcerts -connect "$domain:$port" < /dev/null | osslpemcerts
}
