# TODO before executing anything, validate that the current shell is Bash as this configuration script is Bash specific.

# TODO check if Augeas can be used for the following purpose as it apparently could preserve formatting and location of edit. See https://stackoverflow.com/a/50323373/320594.
function remove_matching_line() {
    [ -f "$1" ] && sed -i "/$2/d" $1
}
# TODO evaluate not to remove previous matches in standard files as this could lead to syntax errors, e.g. if we match the whole content of an "if" clause, the following would delete its content producing a syntax problem. Prefer to perform the appropriate configuration overrides only from my own dedicated files, e.g. .bashrc_jh or .bash_profile_jh.
function remove_all_matches() {
    remove_matching_line ~/.bashrc "$1"
    remove_matching_line ~/.bash_profile "$1"
    remove_matching_line ~/.profile "$1"
}
function update_bashrc() {
    remove_all_matches "$1"
    echo $2 >> ~/.bashrc
}
function update_profile_file() {
    remove_all_matches "$1"
    echo $2 >> ~/.bash_profile
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

######
# Shell configuration
# TODO try to keep all shell configuration edits in blocks to make it easier to visually identify the configurations being managed from here or even better use dedicated files files and just source them, i.e. .bashrc_jh .bash_profile_jh. See https://superuser.com/a/224204/89031. Check if this might be somehow related too https://github.com/AlbanAndrieu/ansible-shell/blob/master/templates/.bashrc.j2.
######
# TODO look for the way to prevent sourcing .bashrc if it has been already sourced with the code in the default .bash_profile.
update_profile_file '^source "${HOME}\/.bashrc"' 'source "${HOME}/.bashrc"'

# Updating aliases. It has been observed that .bash_aliases is named .alias in systems like openSUSE, so we prefer to use .bash_aliases_jh just to keep it agnostic from every different distribution.
cp $DIR/.bash_aliases_jh ~/.bash_aliases_jh
. ~/.bash_aliases_jh
update_bashrc '\.bash_aliases_jh' "test -s ~/.bash_aliases_jh && . ~/.bash_aliases_jh || true"
test -s ~/.bash_aliases && echo "WARNING: .bash_aliases already exists. Check if there are old definitions to delete there."
test -s ~/.alias && echo "WARNING: .alias already exists. Check if there are old definitions to delete there."

# Updating preferred editor
# TODO confirm that the profile file is the more correct place to set the EDITOR, e.g. instead of .bashrc. See https://unix.stackexchange.com/a/129144/11564.
update_profile_file 'export VISUAL' 'export VISUAL=emacs; export EDITOR="$VISUAL"'

# TODO try to include a custom ~/.screenrc_jh from the main ~/.screenrc instead of overwriting
# TODO maybe indicate/warn if this file was "updated" or "overwritten"
cp $DIR/.screenrc ~/.screenrc
# Starting screen automatically on login
update_profile_file 'screen -R' 'if [ -z "$JHLP_NO_AUTOLOAD_SCREEN" ] && [ -z "$STY" ]; then screen -R; fi'

# Close Bash sessions after $BASH_IDLE_SESSION_TIMEOUT seconds of inactivity but do not apply it for screen sessions as we prefer to detach them via "idle" in .screenrc. TODO confirm that having an open editor like Emacs doesn't count as inactivity inside a screen session our without it.
update_profile_file '^BASH_IDLE_SESSION_TIMEOUT=' 'BASH_IDLE_SESSION_TIMEOUT=300'
update_profile_file 'unset TMOUT' 'if [ -z "$JHLP_DISABLE_BASH_IDLE_SESSION_TIMEOUT" ] && [ -z "$STY" ]; then TMOUT=$BASH_IDLE_SESSION_TIMEOUT; else unset TMOUT; fi'

update_bashrc 'HISTCONTROL=' 'HISTCONTROL=ignoreboth'
# About the "DUMMY" value, see https://superuser.com/questions/1446920/setting-bash-history-sizes-to-1-clears-the-history.
update_bashrc 'HISTSIZE=' "HISTSIZE='DUMMY'"
update_bashrc 'HISTFILESIZE=' "HISTFILESIZE='DUMMY'"
# TODO when creating .bashrc_jh, evaluate to allow my customizations to run only once by using a variable like $JHLP_BASHRC_LOADED, but maybe there is no real problem with allowing my .bashrc configurations to load several times.

stty -ixon

#######
# Updating authorized SSH keys
#######
mkdir -p ~/.ssh/
# TODO check: maybe we should append instead of fully replace?.
# TODO maybe indicate/warn if authorized_keys was "updated" or "overwritten"
cp $DIR/authorized_keys ~/.ssh/authorized_keys
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys

####
# Git configuration
####
git config --global user.name "Jaime Hablutzel"
git config --global user.email "hablutzel1@gmail.com"

# TODO maybe link the full 'hooks' directory instead of each hook.
# Git hook to execute this script automatically when pulling changes.
ln -sf $DIR/git_hooks/post-merge $DIR/.git/hooks/post-merge

####
# User crontab configuration
####
tmpcronfile=$(mktemp)
crontab -l >"$tmpcronfile"
sed -i '/.jaime-hablutzel-linux-profile/d' $tmpcronfile
# TODO instead of keep adding preceding newlines, just verify that the file is terminated in a new line before appending the command.
echo >> $tmpcronfile
# TODO check better the -q and STDERR supression for "git pull", e.g. it has been observed that the "echo"s in the current file are being output to STDERR when ran as part of the Git hook execution, but is this the expected behavior?.
echo "*/5 * * * * cd ~/.jaime-hablutzel-linux-profile/ && git pull -q 2>/dev/null" >> $tmpcronfile
crontab $tmpcronfile
rm -f $tmpcronfile

echo "Jaime Hablutzel's configuration applied."
