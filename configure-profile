# TODO before executing anything, validate that the current shell is Bash as this configuration script is Bash specific.

# TODO check if Augeas can be used for the following purpose as it apparently could preserve formatting and location of edit. See https://stackoverflow.com/a/50323373/320594.
function remove_matching_line() {
    [ -f "$1" ] && sed -i.bak -e "/$2/d" $1 && rm ${1}.bak
}
# TODO evaluate not to remove previous matches in standard files as this could lead to syntax errors, e.g. if we match the whole content of an "if" clause, the following would delete its content producing a syntax problem. Prefer to perform the appropriate configuration overrides only from my own dedicated files, e.g. .bashrc_jh or .bash_profile_jh (but in that case perform a final removal of the entries I placed in the defaul shell configuration files, maybe by receiving the patterns in something like a 'old_patterns_to_delete' that removes previous entries only once in which case it will need a marker file or something like that to get sure of performing this only once).
function remove_all_matches() {
    remove_matching_line ~/.bashrc "$1"
    remove_matching_line ~/.bash_profile "$1"
    remove_matching_line ~/.profile "$1"
}
function append_bashrc() {
    remove_all_matches "$1"
    echo $2 >> ~/.bashrc
}
function append_profile_file() {
    remove_all_matches "$1"
    echo $2 >> ~/.bash_profile
}

function prepend_profile_file() {
    remove_all_matches "$1"
    sed -i.bak -e "1s;^;$2\n;" ~/.bash_profile && rm ~/.bash_profile.bak
}

function is_interactive_shell() {
  [[ $- == *i* ]]
}

if is_interactive_shell; then
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    if command -v apt &>/dev/null; then
      sudo apt update -qq
      # TODO make the following less verbose carefully.
      sudo apt install -qqq -y cron emacs-nox vim neovim curl jq xsel autossh 
      
      # TODO look for a more precise way to detect that Rsyslog is active in this system.
      if [ -d /etc/rsyslog.d ]; then
        sudo tee /etc/rsyslog.d/99-ignore-cron-jobs-for-jhablutzel.conf > /dev/null <<EOF
# In Debian it has been observed that these logs can be still found in the systemd journal: journalctl -u cron.service
if \$programname == 'CRON' and \$msg contains '(jhablutzel) CMD (' then {
stop
}
EOF
        sudo systemctl restart rsyslog
      fi
    fi
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    if command -v brew &>/dev/null; then
      brew install -q jq autossh neovim
    fi
  fi
else
  echo "Not an interactive terminal. Not performing configuration that requires sudo."
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

######
# Shell configuration
# TODO try to keep all shell configuration edits in blocks to make it easier to visually identify the configurations being managed from here or even better use dedicated files files and just source them, i.e. .bashrc_jh .bash_profile_jh. See https://superuser.com/a/224204/89031. Check if this might be somehow related too https://github.com/AlbanAndrieu/ansible-shell/blob/master/templates/.bashrc.j2.
######
# TODO look for the way to prevent sourcing .bashrc if it has been already sourced with the code in the default .bash_profile.
append_profile_file '^source "${HOME}\/.bashrc"' 'source "${HOME}/.bashrc"'

# Set the window title to the hostname.
# FIXME a combination of PROMPT_COMMAND and PS1 is making shell integration not working in the mac. Maybe remove these variables at this level if shell integration can help to configure them better. Anyway, consider support for Termius and iTerm2.
append_bashrc 'then PROMPT_COMMAND=' 'if [ -n "$TMUX" ]; then PROMPT_COMMAND='"'"'echo -ne "\033Ptmux;\033\033]0;$(hostname -s)\007\033\\"'"'"'; else PROMPT_COMMAND='"'"'echo -ne "\033]0;$(hostname -s)\007"'"'"'; fi' 

# TODO confirm that the colors (including the random ones) for the prompt are really compatible across terminals in different systems: macOS, multiple Linux servers, Linux for Desktop, Termius for iOS and Desktop, etc.
# TODO Look for the way to root sessions to be prompted in a different color to reflect warning, e.g. all the prompt could be painted in red.
# TODO check why are two backslashes apparently required before $ while it isn't required for the other escapes as \n. Check TLCL on this.
# TODO try to print the exit code of the previous command while maintaining the previous command exit code in $? in case the user wants to do "echo $?".
if [ -f ~/.bash_jh_prompt_color ]; then
  random_color=$(cat ~/.bash_jh_prompt_color)
else
  random_color=$(( 31 + ( RANDOM % 6 )))
  echo $random_color > ~/.bash_jh_prompt_color
fi
# Based on the defaults in Debian 11 (/etc/skel/.bashrc).
append_bashrc '^PS1=' 'PS1="\[\033[01;'$random_color'm\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\n\\$ "'

# Updating aliases. It has been observed that .bash_aliases is named .alias in systems like openSUSE, so we prefer to use .bash_aliases_jh just to keep it agnostic from every different distribution.
cp $DIR/.bash_aliases_jh ~/.bash_aliases_jh
. ~/.bash_aliases_jh
append_bashrc '\.bash_aliases_jh' "test -s ~/.bash_aliases_jh && . ~/.bash_aliases_jh || true"
test -s ~/.bash_aliases && echo "WARNING: .bash_aliases already exists. Check if there are old definitions to delete there."
test -s ~/.alias && echo "WARNING: .alias already exists. Manually check if there are old definitions to delete there."

# TODO instead of overwritting ~/.emacs, evaluate to just include a file like ~/.emacs_jh from it, so it is still possible to customize Emacs settings in each server.
cp $DIR/.emacs ~/.emacs

# Vim.
# See the TODOS for the similar .emacs.
cp $DIR/.vimrc ~/.vimrc

# Neovim.
mkdir -p ~/.config/nvim
cp $DIR/init.vim ~/.config/nvim/init.vim

# Default editor
# TODO confirm that the profile file is the more correct place to set the EDITOR, e.g. instead of .bashrc (where these variables might not require to be exported). See https://unix.stackexchange.com/a/129144/11564.
append_profile_file 'export VISUAL' 'export VISUAL=vim; export EDITOR="$VISUAL"; export GIT_EDITOR="$VISUAL"'

# Less customizations
# Case-insensitive search by default.
append_profile_file 'export LESS' 'export LESS="-i -R"'

if is_interactive_shell && [ -z "$JHLP_NO_MULTIPLEXER" ] && ( ! command -v tmux &>/dev/null || ! command -v screen &>/dev/null ); then
  echo "Do you want to set up a multiplexer (tmux or screen)? (y/n)"
  read -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
      if command -v apt &>/dev/null; then
        sudo apt install -qqq -y tmux screen
      elif command -v dnf &>/dev/null; then
        sudo dnf -y install tmux screen
      fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      if command -v brew &>/dev/null; then
        brew install -q tmux
      fi
    fi
  else
    export JHLP_NO_MULTIPLEXER=1
    append_profile_file 'export JHLP_NO_MULTIPLEXER' 'export JHLP_NO_MULTIPLEXER=1'
  fi
fi
# Multiplexers setup: Starting tmux or screen automatically on login
cp $DIR/.tmux.conf ~/.tmux.conf
append_profile_file 'tmux new-session' 'if [ -z "$JHLP_PREFER_SCREEN" ] && [ -z "$JHLP_NO_MULTIPLEXER" ] && { [ -z "$STY" ] && [ -z "$TMUX" ]; }; then tmux new-session -A -s main; fi'
# TODO try to include a custom ~/.screenrc_jh from the main ~/.screenrc instead of overwriting
# TODO maybe indicate/warn if this file was "updated" or "overwritten"
cp $DIR/.screenrc ~/.screenrc
append_profile_file 'screen -R' 'if [ -n "$JHLP_PREFER_SCREEN" ] && [ -z "$JHLP_NO_MULTIPLEXER" ] && { [ -z "$STY" ] && [ -z "$TMUX" ]; }; then screen -R; fi'

# Removing remnants of: Close Bash sessions after $BASH_IDLE_SESSION_TIMEOUT seconds of inactivity.
remove_all_matches '^BASH_IDLE_SESSION_TIMEOUT='
remove_all_matches 'unset TMOUT'

# We are putting the HIST* variables at the beginning of ~/.bash_profile given that it is the first file that is sourced when a new login shell is started and it is important to ensure that these variables are set before anything else, otherwise an error later during initialization could produce unintended history truncation, e.g. it has been observed that if the Bash completion initialization hangs forever (e.g. when Docker is set to a non-available context), if the HIST* variables are not already set, when the terminal is closed, truncation to the default 500 lines occurs for the Bash history file.
prepend_profile_file 'HISTCONTROL=' 'HISTCONTROL=ignoreboth'
# About the "DUMMY" value, see https://superuser.com/questions/1446920/setting-bash-history-sizes-to-1-clears-the-history.
prepend_profile_file 'HISTSIZE=' "HISTSIZE='DUMMY'"
prepend_profile_file 'HISTFILESIZE=' "HISTFILESIZE='DUMMY'"

# The previous HIST* variables apparently are not enough to guarantee history is never truncated. Now testing the following. See https://git.savannah.gnu.org/cgit/bash.git/tree/bashhist.c?h=bash-5.2#n159
# TODO evaluate to use prepend_profile_file instead as it seems to load before, but ensure this loading is guaranteed.
append_bashrc "shopt -s histappend" "shopt -s histappend"

# The results of history substitution are not immediately passed to the shell parser.
append_bashrc "shopt -s histverify" "shopt -s histverify"

# TODO when creating .bashrc_jh, evaluate to allow my customizations to run only once by using a variable like $JHLP_BASHRC_LOADED, but maybe there is no real problem with allowing my .bashrc configurations to load several times.

append_bashrc "stty -ixon" "stty -ixon"

#######
# Updating authorized SSH keys
#######
mkdir -p ~/.ssh/
cp $DIR/authorized_keys_global ~/.ssh/authorized_keys
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
if [ -f ~/.ssh/authorized_keys_host_specific ]; then
    cat ~/.ssh/authorized_keys_host_specific >> ~/.ssh/authorized_keys
fi

####
# Git configuration
####
git config --global user.name "Jaime Hablutzel"
git config --global user.email "hablutzel1@gmail.com"
# Recommended value for Unix like systems.
git config --global core.autocrlf input

git_global_ignore() {
  local ignore_file="$HOME/.config/git/ignore"
  local line_to_add="$1"

  if [ -f "$ignore_file" ]; then
    if ! grep -q "^$line_to_add$" "$ignore_file"; then
      echo "$line_to_add" >> "$ignore_file"
    fi
  else
    mkdir -p "$(dirname "$ignore_file")"
    echo "$line_to_add" > "$ignore_file"
  fi
}
git_global_ignore ".DS_Store"
git_global_ignore ".idea/"
git_global_ignore "*.iml"

# TODO maybe link the full 'hooks' directory instead of each hook.
# Git hook to execute this script automatically when pulling changes.
ln -sf ../../git_hooks/post-merge $DIR/.git/hooks/post-merge

####
# User crontab configuration
####
tmpcronfile=$(mktemp)
crontab -l >"$tmpcronfile"
sed -i.bak -e '/.chatgpt-shell-cli/d' $tmpcronfile && rm ${tmpcronfile}.bak
sed -i.bak -e '/.jaime-hablutzel-linux-profile/d' $tmpcronfile && rm ${tmpcronfile}.bak
# Keep the following line even though it should be required only once per host as cleanup.
sed -i.bak -e '/.codex-cli/d' $tmpcronfile && rm ${tmpcronfile}.bak
# TODO instead of keep adding preceding newlines, just verify that the file is terminated in a new line before appending the command.
echo >> $tmpcronfile
# TODO check better the -q and STDERR supression for "git pull", e.g. it has been observed that the "echo"s in the current file are being output to STDERR when ran as part of the Git hook execution, but is this the expected behavior?.
# TODO instead of supressing STDERR, evaluate to always send it to a Git ignored file under ~/.jaime-hablutzel-linux-profile/ to avoid totally losing possible errors like "fatal: unable to access 'https://github.com/hablutzel1/jaime-hablutzel-linux-profile.git/': The requested URL returned error: 504".
echo "0 1 * * * cd ~/.chatgpt-shell-cli/ && git pull -q 2>/dev/null" >>$tmpcronfile
echo "*/5 * * * * cd ~/.jaime-hablutzel-linux-profile/ && git pull -q 2>/dev/null" >> $tmpcronfile
if [[ "$OSTYPE" == "darwin"* ]]; then
  sed -i.bak -e '/.bash_history_backups/d' $tmpcronfile && rm ${tmpcronfile}.bak
  random_hour=$((8 + RANDOM % 15))
  random_minute=$((RANDOM % 60))
  echo "$random_minute $random_hour * * * cp /Users/jhablutzel/Library/Mobile\ Documents/com~apple~CloudDocs/macos_settings/Users/jhablutzel/.bash_history /Users/jhablutzel/Library/Mobile\ Documents/com~apple~CloudDocs/macos_settings/Users/jhablutzel/.bash_history_backups/\$(date +\%Y-\%m-\%d-\%H-\%M-\%S).bash_history" >> $tmpcronfile
  echo "NOTE: Ensure to assign Full Disk Access to the 'cron' program to be able to access iCloud Drive for .bash_history backups."
fi
crontab $tmpcronfile
rm -f $tmpcronfile

#####
# Uninstall old Codex CLI configuration
#####
if [ -d ~/.codex-cli ]; then
  source ~/.codex-cli/scripts/bash_cleanup.sh
  rm -rf ~/.codex-cli
fi

######
# chatGPT-shell-cli configuration
######
chatgpt_shell_cli_repo=https://github.com/0xacx/chatGPT-shell-cli.git
if [ -d ~/.chatgpt-shell-cli ]; then
    bash -c 'cd ~/.chatgpt-shell-cli && git pull'
else
  git clone $chatgpt_shell_cli_repo ~/.chatgpt-shell-cli
fi
# Temporary workaround for https://github.com/0xacx/chatGPT-shell-cli/issues/111. Remove it when the issue is fixed.
append_profile_file 'export COLUMNS' "export COLUMNS=80"
if is_interactive_shell && [ -z "$JHLP_NO_CHATGPT_SHELL_CLI" ] && [ -z "$OPENAI_KEY" ]; then
  echo "Do you want to set up chatGPT-shell-cli? (y/n)"
  read -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Please provide the OpenAI API key to set up chatGPT-shell-cli (or CTRL+C to abort):"
    read -s chatgpt_shell_cli_password
    export OPENAI_KEY="$chatgpt_shell_cli_password"    
    append_profile_file 'export OPENAI_KEY' "export OPENAI_KEY=$chatgpt_shell_cli_password"
  else
    export JHLP_NO_CHATGPT_SHELL_CLI=1
    append_profile_file 'export JHLP_NO_CHATGPT_SHELL_CLI' 'export JHLP_NO_CHATGPT_SHELL_CLI=1'
  fi
fi

######
# GH CLI setup
######
if is_interactive_shell && [ -z "$JHLP_NO_GITHUB_CLI" ]; then
  if ! gh auth status &>/dev/null; then
    echo "Do you want to set up GitHub CLI? (y/n)"
    read -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt &>/dev/null; then
          # curl is required for the following to work, so we installed it before.
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg 2>/dev/null && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update -qq
          # TODO make the `gh` installation optional as it won't be used in all systems. Can we make it depend on an environment variable like `TRUSTED_HOST`? But does gh have a lot of dependencies? Otherwise it might be acceptable to always install it. It requires a GPG configuration and a dedicated repository, so it is not a trivial installation. So try to remove this installation by default. Anyway it won't be used in most places.
          sudo apt install -qqq -y gh
        fi      
      elif [[ "$OSTYPE" == "darwin"* ]]; then
        if command -v brew &>/dev/null; then
          brew install -q gh
        fi
      fi        
      gh auth login        
      # TODO support updating the extension if it is already installed, https://docs.github.com/en/copilot/managing-copilot/configure-personal-settings/installing-github-copilot-in-the-cli#updating-copilot-in-the-cli
      gh extension install github/gh-copilot
    else
      export JHLP_NO_GITHUB_CLI=1
      append_profile_file 'export JHLP_NO_GITHUB_CLI' 'export JHLP_NO_GITHUB_CLI=1'
    fi
  fi
fi

echo "Jaime Hablutzel's configuration applied."
