# TODO make this update/overwrite the values for:
#HISTSIZE=-1
#HISTFILESIZE=-1

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

######
# Updating aliases
# It has been observed that .bash_aliases is named .alias in systems like openSUSE, so we prefer to use .bash_aliases_jh just to keep it agnostic from every different distribution.
######
cp $DIR/.bash_aliases_jh ~/.bash_aliases_jh
. ~/.bash_aliases_jh
# Removing the line if it already exists.
sed -i '/\.bash_aliases_jh/d' ~/.bashrc
echo "test -s ~/.bash_aliases_jh && . ~/.bash_aliases_jh || true" >> ~/.bashrc
test -s ~/.bash_aliases && echo "WARNING: .bash_aliases already exists. Check if there are old definitions to delete there."
test -s ~/.alias && echo "WARNING: .alias already exists. Check if there are old definitions to delete there."
echo ".bash_aliases_jh updated"

#######
# Updating authorized SSH keys
#######
mkdir -p ~/.ssh/
# TODO check: maybe we should append instead of fully replace?.
cp $DIR/authorized_keys ~/.ssh/authorized_keys
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
# TODO indicate if authorized_keys was "updated" or "overwritten"
echo "SSH authorized keys updated"

# TODO try to reuse to this function for updating other files like ~/.bashrc.
# TODO check if Augeas can be used for the following purpose.
function update_profile_file() {
    deletion_pattern="/$1/d"
    updated_line=$2
    [ -f ~/.bash_profile ] && sed -i "${deletion_pattern}" ~/.bash_profile
    [ -f ~/.profile ] && sed -i "${deletion_pattern}" ~/.profile
    FILE=~/.bash_profile
    if [ ! -f "$FILE" ]; then
        FILE=~/.profile
    fi
    echo ${updated_line} >> $FILE
}

######
# Updating preferred editor
######
# TODO confirm that the profile file is the more correct place to set the EDITOR, e.g. instead of .bashrc.
update_profile_file 'export VISUAL' 'export VISUAL=emacs; export EDITOR="$VISUAL"'
echo "preferred editor is now emacs"

######
# Bash and screen configuration
######
# TODO try to include a custom ~/.screenrc_jh from the main ~/.screenrc instead of overwriting
cp $DIR/.screenrc ~/.screenrc
# TODO indicate if this file was "updated" or "overwritten"
echo "~/.screenrc updated"
# Starting screen automatically on login
update_profile_file 'screen -R' 'if [ -z "$JHLP_NO_AUTOLOAD_SCREEN" ] && [ -z "$STY" ]; then screen -R; fi'
echo "screen configured to be automatically executed on login"
# Close Bash sessions after $BASH_IDLE_SESSION_TIMEOUT seconds of inactivity but do not apply it for screen sessions as we prefer to detach them via "idle" in .screenrc. TODO confirm that having an open editor like Emacs doesn't count as inactivity inside a screen session our without it.
update_profile_file '^BASH_IDLE_SESSION_TIMEOUT=' 'BASH_IDLE_SESSION_TIMEOUT=300'
update_profile_file 'unset TMOUT' 'if [ -z "$JHLP_DISABLE_BASH_IDLE_SESSION_TIMEOUT" ] && [ -z "$STY" ]; then TMOUT=$BASH_IDLE_SESSION_TIMEOUT; else unset TMOUT; fi'

####
# Git configuration
####
git config --global user.name "Jaime Hablutzel"
git config --global user.email "hablutzel1@gmail.com"
echo "Git user.name and user.email configured"

# TODO maybe link the full 'hooks' directory instead of each hook.
ln -sf $DIR/git_hooks/post-merge $DIR/.git/hooks/post-merge
echo "Installed Git hook to execute this script automatically when pulling changes"

####
# User crontab configuration
####
tmpcronfile=$(mktemp)
crontab -l >"$tmpcronfile"
sed -i '/.jaime-hablutzel-linux-profile/d' $tmpcronfile
# TODO instead of keep adding preceding newlines, just verify that the file is terminated in a new line before appending the command.
echo >> $tmpcronfile
# TODO check better the -q and STDERR supression for "git pull", e.g. it has been observed that the "echo"s in the current file are being output to STDERR when ran as part of the Git hook execution, but is this the expected behavior?.
echo "*/5 * * * * cd ~/.jaime-hablutzel-linux-profile/ && git pull -q 2>/dev/null" >> $tmpcronfile
crontab $tmpcronfile
rm -f $tmpcronfile
echo "crontab installed to pull changes for this repo every 5 minutes"
